@{
    ViewData["Title"] = "Home Page";
}
@model MeDirect.Web.Models.UpdateGameSettingsViewModel
<div class="text-center">
    <h1 class="display-4">Welcome MeDirect Bank Lights Off game</h1>
    <p>Let's turn off all lights </p>
</div>

<div class="row">
    <div class="col-sm-12 d-flex justify-content-center text-center">
        <button type="button" class="btn btn-primary mb-2" id="createGame" name="createGame">Create Board</button>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 d-flex justify-content-center text-center">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Score</h5>
                <input type="text" readonly class="form-control-plaintext text-center" id="totalClickCount" value="0">
                <div id="board"></div>
            </div>
        </div>
    </div>

</div>
@Html.HiddenFor(x => x.GameSettings.Size, new { @class = "form-control-plaintext text-center" })

@section Scripts{

    <script>

        let xlength;
        let ylength;
        let boardContainer = [];

        $(document).ready(function () {
            xlength = $('#GameSettings_Size').val();
            ylength = $('#GameSettings_Size').val();
            console.log(xlength);
        })


        $('#createGame').click(function () {
            $.ajax({
                type: "POST",
                url: '/Home/CreateBoard',
                async: false,
                success: success,
                error: error
            });
        })


        function success(result, status) {
            boardContainer = result;
            displayBoard(boardContainer, xlength, ylength);
        }
        function error(result, status) {
            alert('Sorry! The GameBoard Couldnt Create');
        }


        function createGame2(xlength, ylength) {

            // Update board container
            boardContainer = createBoard(xlength, ylength);

            // Reset counter
            attemptsCounter = 0;
            /*attemptsPara.innerHTML = `Attempts: ${attemptsCounter}`;*/

            // Reset board completed
            boardCompleted = false;

            // Finally display the board
            displayBoard(boardContainer);
        }

        function createBoard(x, y) {

            let newBoard = [];

            for (j = 0; j < y; j++) {
                let xRow = [];
                var lightIndex = Math.floor(Math.random() * x);
                for (i = 0; i < x; i++) {
                    let lightOn = false;
                    if (lightIndex === i) {
                        lightOn = true;
                    }
                    xRow.push(lightOn);
                }

                newBoard.push(xRow);
            }
            return newBoard;

        }

        function displayBoard(board, xlength, ylength) {

            let boardDiv = document.getElementById("board");
            while (boardDiv.hasChildNodes()) {
                boardDiv.removeChild(boardDiv.lastChild);
            }

            for (i = 0; i < ylength; i++) {

                let row = document.createElement('div');
                row.className = 'row';

                for (j = 0; j < xlength; j++) {
                    let boardItem = document.createElement('div');
                    if (board[i].columns[j].col === true) {
                        boardItem.className = 'boardItemLightOn';
                    }
                    else {
                        boardItem.className = 'boardItemLightOff';
                    }
                    boardItem.onclick = userClick.bind(undefined, i, j, xlength, ylength);
                    row.appendChild(boardItem);
                }
                boardDiv.appendChild(row);
            }
        }




        function userClick(y, x, xlen, ylen) {
            debugger;
            var i = document.getElementById('totalClickCount').value;
            document.getElementById('totalClickCount').value = ++i;
            var GameBoardClick = {
                    BoardRows: boardContainer,
                    ClickY: y,
                    ClickX: x,
            }
            $.ajax({
                type: "POST",
                url: '/Home/ClickBoard',
                data: GameBoardClick,
                async: false,
                success: function (result, status) {
                   
                    boardContainer = result.boardRows;
                    displayBoard(boardContainer, xlen, ylen);
                    var boardCompleted = result.isComplated//checkBoardCompleted(boardContainer);
                    if (boardCompleted) {
                        Swal.fire(
                            `Congratulations! you've completed the game with ${document.getElementById('totalClickCount').value} attempt. `,
                            '',
                            'success'
                        )
                    }
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Something went wrong!',

                    })
                }
            });



            //updateBoard(boardContainer, y, x);
            //displayBoard(boardContainer, xlen, ylen);

            //var i = document.getElementById('totalClickCount').value;
            //document.getElementById('totalClickCount').value = ++i;

            //var boardCompleted = checkBoardCompleted(boardContainer);

            //if (boardCompleted) {
            //     Swal.fire(
            //            `Congratulations! you've completed the game with ${document.getElementById('totalClickCount').value} attempt. `,
            //            '',
            //            'success'
            //        )    
            //}

        }


        //function updateBoard(board, y, x) {

        //    board[y].columns[x].col = !board[y].columns[x].col;
        //    // Update

        //    if (y > 0) {
        //        board[y - 1].columns[x].col = !board[y - 1].columns[x].col;
        //    }
        //    if (y < board.length - 1) {
        //        board[y + 1].columns[x].col = !board[y + 1].columns[x].col;
        //    }
        //    if (x > 0) {
        //        board[y].columns[x - 1].col = !board[y].columns[x - 1].col;
        //    }
        //    if (x < board.length - 1) {
        //        board[y].columns[x + 1].col = !board[y].columns[x + 1].col;
        //    }
        //}

        //function checkBoardCompleted(board) {
        //    debugger;
        //    let result = true;
        //    for (i = 0; i < board.length; i++) {
        //        for (j = 0; j < board.length; j++) {
        //            if (board[i].columns[j].col === false) {
        //                result=false;
        //            }
        //        }
        //    }
        //    return result;
        //}
    </script>

}
